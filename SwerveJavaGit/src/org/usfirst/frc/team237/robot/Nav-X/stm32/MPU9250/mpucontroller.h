/* ============================================
navX MXP source code is placed under the MIT license
Copyright (c) 2015 Kauai Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/

#ifndef MPUCONTROLLER_H_
#define MPUCONTROLLER_H_

#include <stdint.h>

#ifdef __cplusplus
#define _EXTERN_ATTRIB extern "C"
#else
#define _EXTERN_ATTRIB
#endif

#define TEMP_READ_MS    (500)		/* MPU Temperature Sampling Period (ms) */
#define COMPASS_READ_MS (500)		/* Compass Sampling Period (ms) */
#define DEFAULT_MPU_HZ  (50)		/* Default MPU sampling rate (Hz) */

/* This structure represents the current values read from the MPU and */
/* calculated by the mpucontroller.                                   */

struct mpu_data {
	float heading;					// 0-360, in degrees (tilt-compensated)
	float yaw;						// -180 - 180, in degrees
	float pitch;					// -180 - 180, in degrees
	float roll;						// -180 - 180, in degrees
	int16_t raw_gyro[3];			// in 16-bit device units
	float calibrated_gyro_x;		// rad/s in body frame
	float calibrated_gyro_y;		// rad/s in body frame
	float calibrated_gyro_z;		// rad/s in body frame
	int16_t raw_accel[3];			// in 16-bit device units
	int16_t raw_compass[3];  		// in 16-bit device units
	int16_t calibrated_compass[3];	// in 16-bit device units
	float ratio_of_mag_field_norm;  // Ratio
	float mag_norm_scalar;			// Coefficient
	bool magnetic_anomaly_detected; // true if norm of compass values exceeds calibrated norm
	bool fused_heading_valid;		// true if fused (9-axis) heading has been referenced
									// to a calibrated compass.
	float world_linear_accel[3]; 	// G in body frame, gravity-removed
	long  quaternion[4];			// Quaternion generated by DMP
	float  temp_c;					// MPU Die temperature
	float fused_heading;			// Fusion of yaw and heading, taking gyro stability
									// and mag disturbance into account, and also
									// interpolating values between each compass update with
									// deltas in yaw change.
	unsigned long timestamp;		// When the mpu data was acquired
};

/* This structure represents the current configuration of the MPU */
/* The current implementation fixes the Gyro FSR to +/- 2000dps   */
/* and fixes the accel_fsr to +/- 2G.                             */

struct mpu_config {
	uint16_t gyro_fsr;
	uint16_t mpu_update_rate;
	uint8_t accel_fsr;
};

/* This structure represents the data acquired via MPU self test.  This */
/* includes accelerometer biases and (initial) gyro biases.             */

struct mpu_selftest_calibration_data {
	long accel_bias[3]; 	  	/* in g << 16 (gravity removed from z axis) */
	uint16_t accel_sensitivity; /* bias * sensitivity = accel in g's */
	long gyro_bias[3];        	/* self-test acquired, in dps << 16 */
	float gyro_sensitivity;   	/* bias * sensitivity = rotation rate in dps */
};

/* This structure represents gyro biases which are calculated by the    */
/* MPU's automatic calibration process; these biases tend to be more    */
/* accurate than the gyro biases calculated during self test.           */

struct mpu_dmp_calibration_data {
	long gyro_bias_q16[3];
	float mpu_temp_c;
};

/* This structure represents the magnetometer calibration data, which   */
/* includes hard iron (bias) and soft-iron (transform matrix) data.     */
/* In support of magnetic disturbance, additional measures and          */
/* thresholds are included.                                             */

struct mag_calibration_data {
	int16_t bias[3];			 /* In device units */
	float xform[3][3];			 /* coefficients applied to device units */
	float earth_mag_field_norm;  /* In device units */
	float mag_disturbance_ratio; /* Ratio (0-1) */
};

_EXTERN_ATTRIB bool mpu_detect();
_EXTERN_ATTRIB void mpu_initialize(unsigned short mpu_interrupt_pin);
_EXTERN_ATTRIB int run_mpu_self_test(struct mpu_selftest_calibration_data *caldata);
_EXTERN_ATTRIB void enable_dmp();
_EXTERN_ATTRIB int dmp_data_ready();
_EXTERN_ATTRIB int get_dmp_data(struct mpu_data *pdata);
_EXTERN_ATTRIB void get_mpu_config(struct mpu_config *pconfig);
_EXTERN_ATTRIB int mpu_set_new_sample_rate( uint8_t new_sample_rate );

_EXTERN_ATTRIB int mpu_apply_calibration_data(struct mpu_selftest_calibration_data *caldata);

_EXTERN_ATTRIB int mpu_did_dmp_gyro_biases_change(struct mpu_dmp_calibration_data *dmpcaldata);
_EXTERN_ATTRIB int mpu_apply_dmp_gyro_biases(struct mpu_dmp_calibration_data *dmpcaldata);

_EXTERN_ATTRIB void mpu_apply_mag_cal_data(struct mag_calibration_data *magcaldata);
_EXTERN_ATTRIB void get_default_mag_cal_data(struct mag_calibration_data *magcaldata);
_EXTERN_ATTRIB void mpu_get_mag_cal_data(struct mag_calibration_data *magcaldata);
_EXTERN_ATTRIB bool is_mag_cal_data_default( struct mag_calibration_data *magcaldata );
_EXTERN_ATTRIB int periodic_compass_update();

#endif /* MPUCONTROLLER_H_ */
